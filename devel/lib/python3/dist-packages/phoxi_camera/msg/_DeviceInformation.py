# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from phoxi_camera/DeviceInformation.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import phoxi_camera.msg

class DeviceInformation(genpy.Message):
  _md5sum = "0b0bc4d79cc2229b2b1a6277b66a3576"
  _type = "phoxi_camera/DeviceInformation"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string name
phoxi_camera/DeviceType type
string hwIdentification
string IPaddress
phoxi_camera/DeviceConnectionStatus status
string firmwareVersion
================================================================================
MSG: phoxi_camera/DeviceType
int32 type
int32 PhoXiScanner = 0
int32 PhoXiCamera = 1
int32 NoValue = 3
================================================================================
MSG: phoxi_camera/DeviceConnectionStatus
int32 status
int32 Unknown = 0
int32 Ready = 1
int32 Occupied = 2
int32 Starting = 3"""
  __slots__ = ['name','type','hwIdentification','IPaddress','status','firmwareVersion']
  _slot_types = ['string','phoxi_camera/DeviceType','string','string','phoxi_camera/DeviceConnectionStatus','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,type,hwIdentification,IPaddress,status,firmwareVersion

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DeviceInformation, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
      if self.type is None:
        self.type = phoxi_camera.msg.DeviceType()
      if self.hwIdentification is None:
        self.hwIdentification = ''
      if self.IPaddress is None:
        self.IPaddress = ''
      if self.status is None:
        self.status = phoxi_camera.msg.DeviceConnectionStatus()
      if self.firmwareVersion is None:
        self.firmwareVersion = ''
    else:
      self.name = ''
      self.type = phoxi_camera.msg.DeviceType()
      self.hwIdentification = ''
      self.IPaddress = ''
      self.status = phoxi_camera.msg.DeviceConnectionStatus()
      self.firmwareVersion = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.type.type
      buff.write(_get_struct_i().pack(_x))
      _x = self.hwIdentification
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.IPaddress
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.status.status
      buff.write(_get_struct_i().pack(_x))
      _x = self.firmwareVersion
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.type is None:
        self.type = phoxi_camera.msg.DeviceType()
      if self.status is None:
        self.status = phoxi_camera.msg.DeviceConnectionStatus()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (self.type.type,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.hwIdentification = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.hwIdentification = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.IPaddress = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.IPaddress = str[start:end]
      start = end
      end += 4
      (self.status.status,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.firmwareVersion = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.firmwareVersion = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.type.type
      buff.write(_get_struct_i().pack(_x))
      _x = self.hwIdentification
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.IPaddress
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.status.status
      buff.write(_get_struct_i().pack(_x))
      _x = self.firmwareVersion
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.type is None:
        self.type = phoxi_camera.msg.DeviceType()
      if self.status is None:
        self.status = phoxi_camera.msg.DeviceConnectionStatus()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (self.type.type,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.hwIdentification = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.hwIdentification = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.IPaddress = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.IPaddress = str[start:end]
      start = end
      end += 4
      (self.status.status,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.firmwareVersion = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.firmwareVersion = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i

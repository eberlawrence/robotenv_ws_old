// Generated by gencpp from file phoxi_camera/SaveFrameRequest.msg
// DO NOT EDIT!


#ifndef PHOXI_CAMERA_MESSAGE_SAVEFRAMEREQUEST_H
#define PHOXI_CAMERA_MESSAGE_SAVEFRAMEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace phoxi_camera
{
template <class ContainerAllocator>
struct SaveFrameRequest_
{
  typedef SaveFrameRequest_<ContainerAllocator> Type;

  SaveFrameRequest_()
    : in(0)
    , path()  {
    }
  SaveFrameRequest_(const ContainerAllocator& _alloc)
    : in(0)
    , path(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _in_type;
  _in_type in;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _path_type;
  _path_type path;





  typedef boost::shared_ptr< ::phoxi_camera::SaveFrameRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::phoxi_camera::SaveFrameRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SaveFrameRequest_

typedef ::phoxi_camera::SaveFrameRequest_<std::allocator<void> > SaveFrameRequest;

typedef boost::shared_ptr< ::phoxi_camera::SaveFrameRequest > SaveFrameRequestPtr;
typedef boost::shared_ptr< ::phoxi_camera::SaveFrameRequest const> SaveFrameRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::phoxi_camera::SaveFrameRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::phoxi_camera::SaveFrameRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::phoxi_camera::SaveFrameRequest_<ContainerAllocator1> & lhs, const ::phoxi_camera::SaveFrameRequest_<ContainerAllocator2> & rhs)
{
  return lhs.in == rhs.in &&
    lhs.path == rhs.path;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::phoxi_camera::SaveFrameRequest_<ContainerAllocator1> & lhs, const ::phoxi_camera::SaveFrameRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace phoxi_camera

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::phoxi_camera::SaveFrameRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::phoxi_camera::SaveFrameRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::phoxi_camera::SaveFrameRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::phoxi_camera::SaveFrameRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::phoxi_camera::SaveFrameRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::phoxi_camera::SaveFrameRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::phoxi_camera::SaveFrameRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cfc9db159c6524fb85964c20a693cd83";
  }

  static const char* value(const ::phoxi_camera::SaveFrameRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcfc9db159c6524fbULL;
  static const uint64_t static_value2 = 0x85964c20a693cd83ULL;
};

template<class ContainerAllocator>
struct DataType< ::phoxi_camera::SaveFrameRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "phoxi_camera/SaveFrameRequest";
  }

  static const char* value(const ::phoxi_camera::SaveFrameRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::phoxi_camera::SaveFrameRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 in        # id of scan returned by trigger_image service. If id is negative new frame is taken (no need to call trigger_image service).\n"
"string path\n"
;
  }

  static const char* value(const ::phoxi_camera::SaveFrameRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::phoxi_camera::SaveFrameRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.in);
      stream.next(m.path);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SaveFrameRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::phoxi_camera::SaveFrameRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::phoxi_camera::SaveFrameRequest_<ContainerAllocator>& v)
  {
    s << indent << "in: ";
    Printer<int64_t>::stream(s, indent + "  ", v.in);
    s << indent << "path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.path);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PHOXI_CAMERA_MESSAGE_SAVEFRAMEREQUEST_H

// Generated by gencpp from file phoxi_camera/SetTransformationMatrixRequest.msg
// DO NOT EDIT!


#ifndef PHOXI_CAMERA_MESSAGE_SETTRANSFORMATIONMATRIXREQUEST_H
#define PHOXI_CAMERA_MESSAGE_SETTRANSFORMATIONMATRIXREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Transform.h>

namespace phoxi_camera
{
template <class ContainerAllocator>
struct SetTransformationMatrixRequest_
{
  typedef SetTransformationMatrixRequest_<ContainerAllocator> Type;

  SetTransformationMatrixRequest_()
    : transform()
    , coordinates_space(0)
    , set_space(false)
    , save_settings(false)  {
    }
  SetTransformationMatrixRequest_(const ContainerAllocator& _alloc)
    : transform(_alloc)
    , coordinates_space(0)
    , set_space(false)
    , save_settings(false)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _transform_type;
  _transform_type transform;

   typedef uint8_t _coordinates_space_type;
  _coordinates_space_type coordinates_space;

   typedef uint8_t _set_space_type;
  _set_space_type set_space;

   typedef uint8_t _save_settings_type;
  _save_settings_type save_settings;





  typedef boost::shared_ptr< ::phoxi_camera::SetTransformationMatrixRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::phoxi_camera::SetTransformationMatrixRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetTransformationMatrixRequest_

typedef ::phoxi_camera::SetTransformationMatrixRequest_<std::allocator<void> > SetTransformationMatrixRequest;

typedef boost::shared_ptr< ::phoxi_camera::SetTransformationMatrixRequest > SetTransformationMatrixRequestPtr;
typedef boost::shared_ptr< ::phoxi_camera::SetTransformationMatrixRequest const> SetTransformationMatrixRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::phoxi_camera::SetTransformationMatrixRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::phoxi_camera::SetTransformationMatrixRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::phoxi_camera::SetTransformationMatrixRequest_<ContainerAllocator1> & lhs, const ::phoxi_camera::SetTransformationMatrixRequest_<ContainerAllocator2> & rhs)
{
  return lhs.transform == rhs.transform &&
    lhs.coordinates_space == rhs.coordinates_space &&
    lhs.set_space == rhs.set_space &&
    lhs.save_settings == rhs.save_settings;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::phoxi_camera::SetTransformationMatrixRequest_<ContainerAllocator1> & lhs, const ::phoxi_camera::SetTransformationMatrixRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace phoxi_camera

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::phoxi_camera::SetTransformationMatrixRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::phoxi_camera::SetTransformationMatrixRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::phoxi_camera::SetTransformationMatrixRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::phoxi_camera::SetTransformationMatrixRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::phoxi_camera::SetTransformationMatrixRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::phoxi_camera::SetTransformationMatrixRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::phoxi_camera::SetTransformationMatrixRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "48667bafc40499797cfb210fb2801b2e";
  }

  static const char* value(const ::phoxi_camera::SetTransformationMatrixRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x48667bafc4049979ULL;
  static const uint64_t static_value2 = 0x7cfb210fb2801b2eULL;
};

template<class ContainerAllocator>
struct DataType< ::phoxi_camera::SetTransformationMatrixRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "phoxi_camera/SetTransformationMatrixRequest";
  }

  static const char* value(const ::phoxi_camera::SetTransformationMatrixRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::phoxi_camera::SetTransformationMatrixRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Transform transform\n"
"uint8 coordinates_space     # 1 = CameraSpace, 2 = MountingSpace, 3 = MarkerSpace, 4 = RobotSpace, 5 = CustomSpace\n"
"bool set_space              # If true then set coordinates_space to to PhoXi Control.\n"
"bool save_settings          # If true then settings will persist after restart of PhoXi Control.\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Transform\n"
"# This represents the transform between two coordinate frames in free space.\n"
"\n"
"Vector3 translation\n"
"Quaternion rotation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::phoxi_camera::SetTransformationMatrixRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::phoxi_camera::SetTransformationMatrixRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.transform);
      stream.next(m.coordinates_space);
      stream.next(m.set_space);
      stream.next(m.save_settings);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetTransformationMatrixRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::phoxi_camera::SetTransformationMatrixRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::phoxi_camera::SetTransformationMatrixRequest_<ContainerAllocator>& v)
  {
    s << indent << "transform: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.transform);
    s << indent << "coordinates_space: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.coordinates_space);
    s << indent << "set_space: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_space);
    s << indent << "save_settings: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.save_settings);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PHOXI_CAMERA_MESSAGE_SETTRANSFORMATIONMATRIXREQUEST_H

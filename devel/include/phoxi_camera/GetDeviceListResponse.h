// Generated by gencpp from file phoxi_camera/GetDeviceListResponse.msg
// DO NOT EDIT!


#ifndef PHOXI_CAMERA_MESSAGE_GETDEVICELISTRESPONSE_H
#define PHOXI_CAMERA_MESSAGE_GETDEVICELISTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <phoxi_camera/DeviceInformation.h>

namespace phoxi_camera
{
template <class ContainerAllocator>
struct GetDeviceListResponse_
{
  typedef GetDeviceListResponse_<ContainerAllocator> Type;

  GetDeviceListResponse_()
    : len(0)
    , out()
    , device_information_list()
    , message()
    , success(false)  {
    }
  GetDeviceListResponse_(const ContainerAllocator& _alloc)
    : len(0)
    , out(_alloc)
    , device_information_list(_alloc)
    , message(_alloc)
    , success(false)  {
  (void)_alloc;
    }



   typedef int64_t _len_type;
  _len_type len;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _out_type;
  _out_type out;

   typedef std::vector< ::phoxi_camera::DeviceInformation_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::phoxi_camera::DeviceInformation_<ContainerAllocator> >> _device_information_list_type;
  _device_information_list_type device_information_list;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type;
  _message_type message;

   typedef uint8_t _success_type;
  _success_type success;





  typedef boost::shared_ptr< ::phoxi_camera::GetDeviceListResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::phoxi_camera::GetDeviceListResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetDeviceListResponse_

typedef ::phoxi_camera::GetDeviceListResponse_<std::allocator<void> > GetDeviceListResponse;

typedef boost::shared_ptr< ::phoxi_camera::GetDeviceListResponse > GetDeviceListResponsePtr;
typedef boost::shared_ptr< ::phoxi_camera::GetDeviceListResponse const> GetDeviceListResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::phoxi_camera::GetDeviceListResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::phoxi_camera::GetDeviceListResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::phoxi_camera::GetDeviceListResponse_<ContainerAllocator1> & lhs, const ::phoxi_camera::GetDeviceListResponse_<ContainerAllocator2> & rhs)
{
  return lhs.len == rhs.len &&
    lhs.out == rhs.out &&
    lhs.device_information_list == rhs.device_information_list &&
    lhs.message == rhs.message &&
    lhs.success == rhs.success;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::phoxi_camera::GetDeviceListResponse_<ContainerAllocator1> & lhs, const ::phoxi_camera::GetDeviceListResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace phoxi_camera

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::phoxi_camera::GetDeviceListResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::phoxi_camera::GetDeviceListResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::phoxi_camera::GetDeviceListResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::phoxi_camera::GetDeviceListResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::phoxi_camera::GetDeviceListResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::phoxi_camera::GetDeviceListResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::phoxi_camera::GetDeviceListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ef887ca1bac751f546c7538e865ddf92";
  }

  static const char* value(const ::phoxi_camera::GetDeviceListResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xef887ca1bac751f5ULL;
  static const uint64_t static_value2 = 0x46c7538e865ddf92ULL;
};

template<class ContainerAllocator>
struct DataType< ::phoxi_camera::GetDeviceListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "phoxi_camera/GetDeviceListResponse";
  }

  static const char* value(const ::phoxi_camera::GetDeviceListResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::phoxi_camera::GetDeviceListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 len\n"
"string[] out\n"
"phoxi_camera/DeviceInformation[] device_information_list\n"
"string message\n"
"bool success\n"
"\n"
"================================================================================\n"
"MSG: phoxi_camera/DeviceInformation\n"
"string name\n"
"phoxi_camera/DeviceType type\n"
"string hwIdentification\n"
"string IPaddress\n"
"phoxi_camera/DeviceConnectionStatus status\n"
"string firmwareVersion\n"
"================================================================================\n"
"MSG: phoxi_camera/DeviceType\n"
"int32 type\n"
"int32 PhoXiScanner = 0\n"
"int32 PhoXiCamera = 1\n"
"int32 NoValue = 3\n"
"================================================================================\n"
"MSG: phoxi_camera/DeviceConnectionStatus\n"
"int32 status\n"
"int32 Unknown = 0\n"
"int32 Ready = 1\n"
"int32 Occupied = 2\n"
"int32 Starting = 3\n"
;
  }

  static const char* value(const ::phoxi_camera::GetDeviceListResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::phoxi_camera::GetDeviceListResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.len);
      stream.next(m.out);
      stream.next(m.device_information_list);
      stream.next(m.message);
      stream.next(m.success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetDeviceListResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::phoxi_camera::GetDeviceListResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::phoxi_camera::GetDeviceListResponse_<ContainerAllocator>& v)
  {
    s << indent << "len: ";
    Printer<int64_t>::stream(s, indent + "  ", v.len);
    s << indent << "out[]" << std::endl;
    for (size_t i = 0; i < v.out.size(); ++i)
    {
      s << indent << "  out[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.out[i]);
    }
    s << indent << "device_information_list[]" << std::endl;
    for (size_t i = 0; i < v.device_information_list.size(); ++i)
    {
      s << indent << "  device_information_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::phoxi_camera::DeviceInformation_<ContainerAllocator> >::stream(s, indent + "    ", v.device_information_list[i]);
    }
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message);
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PHOXI_CAMERA_MESSAGE_GETDEVICELISTRESPONSE_H

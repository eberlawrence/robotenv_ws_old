// Generated by gencpp from file phoxi_camera/GetSupportedCapturingModesResponse.msg
// DO NOT EDIT!


#ifndef PHOXI_CAMERA_MESSAGE_GETSUPPORTEDCAPTURINGMODESRESPONSE_H
#define PHOXI_CAMERA_MESSAGE_GETSUPPORTEDCAPTURINGMODESRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <phoxi_camera/PhoXiSize.h>

namespace phoxi_camera
{
template <class ContainerAllocator>
struct GetSupportedCapturingModesResponse_
{
  typedef GetSupportedCapturingModesResponse_<ContainerAllocator> Type;

  GetSupportedCapturingModesResponse_()
    : supported_capturing_modes()
    , message()
    , success(false)  {
    }
  GetSupportedCapturingModesResponse_(const ContainerAllocator& _alloc)
    : supported_capturing_modes(_alloc)
    , message(_alloc)
    , success(false)  {
  (void)_alloc;
    }



   typedef std::vector< ::phoxi_camera::PhoXiSize_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::phoxi_camera::PhoXiSize_<ContainerAllocator> >> _supported_capturing_modes_type;
  _supported_capturing_modes_type supported_capturing_modes;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type;
  _message_type message;

   typedef uint8_t _success_type;
  _success_type success;





  typedef boost::shared_ptr< ::phoxi_camera::GetSupportedCapturingModesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::phoxi_camera::GetSupportedCapturingModesResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetSupportedCapturingModesResponse_

typedef ::phoxi_camera::GetSupportedCapturingModesResponse_<std::allocator<void> > GetSupportedCapturingModesResponse;

typedef boost::shared_ptr< ::phoxi_camera::GetSupportedCapturingModesResponse > GetSupportedCapturingModesResponsePtr;
typedef boost::shared_ptr< ::phoxi_camera::GetSupportedCapturingModesResponse const> GetSupportedCapturingModesResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::phoxi_camera::GetSupportedCapturingModesResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::phoxi_camera::GetSupportedCapturingModesResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::phoxi_camera::GetSupportedCapturingModesResponse_<ContainerAllocator1> & lhs, const ::phoxi_camera::GetSupportedCapturingModesResponse_<ContainerAllocator2> & rhs)
{
  return lhs.supported_capturing_modes == rhs.supported_capturing_modes &&
    lhs.message == rhs.message &&
    lhs.success == rhs.success;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::phoxi_camera::GetSupportedCapturingModesResponse_<ContainerAllocator1> & lhs, const ::phoxi_camera::GetSupportedCapturingModesResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace phoxi_camera

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::phoxi_camera::GetSupportedCapturingModesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::phoxi_camera::GetSupportedCapturingModesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::phoxi_camera::GetSupportedCapturingModesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::phoxi_camera::GetSupportedCapturingModesResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::phoxi_camera::GetSupportedCapturingModesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::phoxi_camera::GetSupportedCapturingModesResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::phoxi_camera::GetSupportedCapturingModesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1c53f107b6664a0a9fe4d1c76bd5c1e0";
  }

  static const char* value(const ::phoxi_camera::GetSupportedCapturingModesResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1c53f107b6664a0aULL;
  static const uint64_t static_value2 = 0x9fe4d1c76bd5c1e0ULL;
};

template<class ContainerAllocator>
struct DataType< ::phoxi_camera::GetSupportedCapturingModesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "phoxi_camera/GetSupportedCapturingModesResponse";
  }

  static const char* value(const ::phoxi_camera::GetSupportedCapturingModesResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::phoxi_camera::GetSupportedCapturingModesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "PhoXiSize[] supported_capturing_modes\n"
"string message\n"
"bool success\n"
"\n"
"================================================================================\n"
"MSG: phoxi_camera/PhoXiSize\n"
"int32 Width\n"
"int32 Height\n"
;
  }

  static const char* value(const ::phoxi_camera::GetSupportedCapturingModesResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::phoxi_camera::GetSupportedCapturingModesResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.supported_capturing_modes);
      stream.next(m.message);
      stream.next(m.success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetSupportedCapturingModesResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::phoxi_camera::GetSupportedCapturingModesResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::phoxi_camera::GetSupportedCapturingModesResponse_<ContainerAllocator>& v)
  {
    s << indent << "supported_capturing_modes[]" << std::endl;
    for (size_t i = 0; i < v.supported_capturing_modes.size(); ++i)
    {
      s << indent << "  supported_capturing_modes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::phoxi_camera::PhoXiSize_<ContainerAllocator> >::stream(s, indent + "    ", v.supported_capturing_modes[i]);
    }
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message);
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PHOXI_CAMERA_MESSAGE_GETSUPPORTEDCAPTURINGMODESRESPONSE_H
